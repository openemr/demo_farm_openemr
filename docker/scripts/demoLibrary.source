#!/bin/bash
#
# Copyright (C) 2017 Brady Miller <brady.g.miller@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Bash library for openemr demo farm
#

# This is the wrapper to start the demo, so only need to modify the specifics in 1 place
# rather than 2. This sets up the pieces for running the startDemo() function
# 1st (and only) parameter is the demo name (one, two, three, etc.)
startDemoWrapper() {
    if [ "$1" == "seven" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php84" "alpine" "3-21" "3.21" "/var/www/localhost/htdocs" "4"
    elif [ "$1" == "eight" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php/8.3/apache2" "ubuntu" "24-04-22" "24.04-22" "/var/www/html" "2"
    elif [ "$1" == "ten" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php81" "alpine" "3-17" "3.17" "/var/www/localhost/htdocs" "6"
    elif [ "$1" == "eleven" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php8" "alpine" "3-15-8" "3.15-8" "/var/www/localhost/htdocs" "6"
    elif [ "$1" == "four" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php84" "alpine" "3-21" "3.21" "/var/www/localhost/htdocs" "3"
    elif [ "$1" == "five" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php83" "alpine" "3-20" "3.20" "/var/www/localhost/htdocs" "3"
    elif [ "$1" == "six" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php/8.3/apache2" "ubuntu" "24-04-22" "22.04-22" "/var/www/html" "6"
    elif [ "$1" == "three" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php/8.3/apache2" "ubuntu" "24-04-20" "24.04-20" "/var/www/html" "2"
    elif [ "$1" == "two" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php82" "alpine" "3-18" "3.18" "/var/www/localhost/htdocs" "6"
    elif [ "$1" == "one" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php83" "alpine" "3-20" "3.20" "/var/www/localhost/htdocs" "6"
    elif [ "$1" == "edu" ]; then
        startDemo "$1" "mysql-openemr" "/etc/php8" "alpine" "3-15-8" "3.15-8" "/var/www/localhost/htdocs" "2"
    else
        startDemo "$1" "mysql-openemr" "/etc/php83" "alpine" "3-20" "3.20" "/var/www/localhost/htdocs" "1"
    fi
}

# Will stop and clear an openemr demo
# 1st parameter is the demo name (one, two, three, etc.)
# 2nd parameter is the mysql root password
stopDemo () {
    local MYSQLIP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-openemr`

    # Stop the docker
    echo "Stop ${1}-openemr docker"
    docker stop ${1}-openemr
    docker rm ${1}-openemr

    # Remove the database stuff
    echo "Clear ${1}-openemr databases and users"
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}wordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_a
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_awordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_b
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_bwordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_c
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_cwordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_d
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_dwordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_e
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_ewordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_f
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_fwordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_g
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_gwordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_h
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_hwordpress
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_i
    mysqladmin -f -h ${MYSQLIP} -u root -p${2} drop ${1}_iwordpress
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}wordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_a';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_awordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_b';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_bwordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_c';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_cwordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_d';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_dwordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_e';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_ewordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_f';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_fwordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_g';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_gwordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_h';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_hwordpress';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_i';FLUSH PRIVILEGES;"
    mysql -f -h ${MYSQLIP} -u root -p${2} -e "DROP USER '${1}_iwordpress';FLUSH PRIVILEGES;"
}

# Will start an openemr demo
# 1st parameter is the demo name (one, two, three, etc.)
# 2nd paremeter is the mysql name (mysql-openemr etc.)
# 3rd parameter is the path to php.ini version (ie. /etc/php/7.0/apache2 )
# 4th parameter is the os (ubuntu, alpine)
# 5th parameter is ubuntu/alpine version with dash (16-04, 17-04, 17-10, etc.)
# 6th parameter is ubuntu/alpine version with period (16.04, 17.04, 17.10, etc.)
# 7th parameter is the path to htdocs (ie. /var/www/html )
# 8th parameter is to set to how many demos it will contain (can select a number from 1 - 10)
startDemo () {
    # Start docker
    echo "Start ${1}-openemr docker"
    docker run --detach --name ${1}-openemr \
                        --env "DOCKERDEMO=${1}" \
                        --env "DOCKERMYSQLHOST=${2}" \
                        --env "DOCKERNUMBERDEMOS=${8}" \
                        --env "OPENEMR_DOCKER_ENV_TAG=demo-farm" \
                        --env "THROTTLE_DOWN_WAIT_MILLISECONDS=700" \
                        --env "THROTTLE_DOWN_DIE_MILLISECONDS=10000" \
                        -v ~/capsules:/home/openemr/capsules:ro \
                        -v ~/translations_development_openemr:/home/openemr/git/translations_development_openemr:ro \
                        -v ~/demo_farm_openemr/docker/php/${5}/php.ini:${3}/php.ini:ro \
                        -v ~/demo_farm_openemr/docker/stunnel/stunnel.conf:/etc/stunnel/stunnel.conf:ro \
                        -v ~/demo_farm_openemr/docker/postfix/${4}/main.cf:/etc/postfix/main.cf:ro \
                        -v ~/cred/sasl_passwd:/etc/postfix/sasl_passwd:ro \
                        -v ~/cred/sasl_passwd.db:/etc/postfix/sasl_passwd.db:ro \
                        -v ~/cred/github-key:/home/openemr/github-key:ro \
                        --net mynet \
                        openemr/pre-openemr:${6}
}

# Will restart an openemr subdemo. This does not restart the docker, just the subdemo.
# 1st parameter is the demo name (one, two, three, etc.)
# 2nd parameter is the demo subname (a, b, c, etc.)(also can be 'empty' which is for the main subdemo)
# 3rd parameter is the mysql root password
restartSubdemo () {
    local MYSQLIP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-openemr`

    # Remove the database stuff
    if [ "$2" == "empty" ]; then
        mysqladmin -f -h ${MYSQLIP} -u root -p${3} drop ${1}
        mysqladmin -f -h ${MYSQLIP} -u root -p${3} drop ${1}wordpress
    else
        mysqladmin -f -h ${MYSQLIP} -u root -p${3} drop ${1}_${2}
        mysqladmin -f -h ${MYSQLIP} -u root -p${3} drop ${1}_${2}wordpress
    fi

    # Now need to reset the demo within the docker
    docker exec -t ${1}-openemr bash -c "cd /home/openemr/git/demo_farm_openemr &&
                                         git fetch &&
                                         git pull origin master &&
                                         cd ~/ &&
                                         bash /home/openemr/git/demo_farm_openemr/demo_build.sh ${2}"
}

startMysql () {
    docker run --detach --name mysql-openemr \
                        --env "MYSQL_ROOT_PASSWORD=hey" \
                        --net mynet \
                        --ulimit nofile=65536:65536 \
                        mariadb:10.6 \
                        --max-connections=450 \
                        --character-set-server=utf8mb4
}

restartMysql () {
    docker stop mysql-openemr
    docker rm mysql-openemr
    startMysql
}

startPhp () {
    docker run --detach --name php-serve \
                        -v ~/html:/usr/share/nginx/html:ro \
                        -v ~/cred/openemr-demo-server.pem:/home/ssh/openemr-demo-server.pem:ro \
                        --net mynet \
                        openemr/php-ssh:7.1-fpm-alpine
}

restartPhp () {
    docker stop php-serve
    docker rm php-serve
    startPhp
}

startNginx () {
    docker run --detach --name reverse-proxy \
                        -p 80:80 \
                        -p 443:443 \
                        -v ~/demo_farm_openemr/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro \
                        -v ~/cred/.htpasswd:/etc/nginx/.htpasswd:ro \
                        -v ~/html:/usr/share/nginx/html:ro \
                        -v certs:/etc/letsencrypt \
                        -v certs-data:/data/letsencrypt \
                        --net mynet \
                        nginx
}

restartNginx () {
    docker stop reverse-proxy
    docker rm reverse-proxy
    startNginx
}

startPhpmyadmin () {
    docker run --detach --name phpmyadmin-openemr \
                        --env "PMA_HOST=mysql-openemr" \
                        --net mynet \
                         phpmyadmin/phpmyadmin
}

restartPhpmyadmin () {
    docker stop phpmyadmin-openemr
    docker rm phpmyadmin-openemr
    startPhpmyadmin
}

primeLetsencrypt () {
    docker run -it --rm \
               -v certs:/etc/letsencrypt \
               -v certs-data:/data/letsencrypt \
               deliverous/certbot \
               certonly \
               --webroot --webroot-path=/data/letsencrypt \
               -d openemr.io \
               -d www.openemr.io \
               -d translations.openemr.io \
               -d admin.openemr.io \
               -d edu.openemr.io \
               -d phpmyadmin.openemr.io \
               -d demo.openemr.io \
               -d one.openemr.io \
               -d two.openemr.io \
               -d three.openemr.io \
               -d four.openemr.io \
               -d five.openemr.io \
               -d six.openemr.io \
               -d seven.openemr.io \
               -d eight.openemr.io \
               -d nine.openemr.io \
               -d ten.openemr.io \
               -d eleven.openemr.io \
               -d edu.open-emr.org \
               -d fh-gmi.openemr.io
}

renewLetsencrypt () {
    docker run -t --rm \
               -v certs:/etc/letsencrypt \
               -v certs-data:/data/letsencrypt \
               -v /var/log/letsencrypt:/var/log/letsencrypt \
               deliverous/certbot \
               renew \
               --webroot --webroot-path=/data/letsencrypt
}

# Will snapshot an openemr demo.
# 1st parameter is the demo name (one, two, three, etc.)
# 2nd parameter is the demo subname (a, b, c, etc.)(also can be 'empty' which is for the main subdemo)
# 3rd parameter is the mysql root password
snapshotDemo() {
    local MYSQLIP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql-openemr`
    local currentTime=`date "+%Y-%m-%d-%H-%M-%S"`
    local snapshotName="${1}-${2}-${currentTime}"
    local capsules=~/capsules
    local tmp="${capsules}/tmp"
    local tmpPath="${tmp}/${snapshotName}"

    echo "creating snapshot; note this will only work on Alpine OS's secondary to hard-coding of www path in this script"
    echo "mysqlip: ${MYSQLIP}"
    echo "snapshotName: ${snapshotName}"
    echo "tmpPath: ${tmpPath}"

    mkdir -p "${tmpPath}"
    if [ "$2" == "empty" ]; then
        echo "snapshot of empty subname (ie. the one without a letter)"
        mysqldump --ignore-table=${1}.onsite_activity_view --hex-blob -u root -p${3} -h ${MYSQLIP} ${1} > "${tmpPath}/backup.sql"
        docker cp "${1}-openemr:/var/www/localhost/htdocs/openemr/sites" "${tmpPath}"
    else
        echo "snapshot of non-empty subname (ie. with a letter)"
        mysqldump --ignore-table=${1}_${2}.onsite_activity_view --hex-blob -u root -p${3} -h ${MYSQLIP} ${1}_${2} > "${tmpPath}/backup.sql"
        docker cp "${1}-openemr:/var/www/localhost/htdocs/${2}/openemr/sites" "${tmpPath}"
    fi
    cd "${tmp}"
    tar -czf "${snapshotName}.tgz" "${snapshotName}"
    mv "${snapshotName}.tgz" "${capsules}/"
    rm -fr "${tmpPath}"
    cd ~
}
